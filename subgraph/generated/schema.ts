// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CreatedRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreatedRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreatedRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreatedRequest", id.toString(), this);
    }
  }

  static load(id: string): CreatedRequest | null {
    return changetype<CreatedRequest | null>(store.get("CreatedRequest", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get request(): Bytes {
    let value = this.get("request");
    return value!.toBytes();
  }

  set request(value: Bytes) {
    this.set("request", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get bucket(): BigInt {
    let value = this.get("bucket");
    return value!.toBigInt();
  }

  set bucket(value: BigInt) {
    this.set("bucket", Value.fromBigInt(value));
  }

  get callGas(): BigInt {
    let value = this.get("callGas");
    return value!.toBigInt();
  }

  set callGas(value: BigInt) {
    this.set("callGas", Value.fromBigInt(value));
  }

  get callValue(): BigInt {
    let value = this.get("callValue");
    return value!.toBigInt();
  }

  set callValue(value: BigInt) {
    this.set("callValue", Value.fromBigInt(value));
  }

  get windowSize(): BigInt {
    let value = this.get("windowSize");
    return value!.toBigInt();
  }

  set windowSize(value: BigInt) {
    this.set("windowSize", Value.fromBigInt(value));
  }

  get windowStart(): BigInt {
    let value = this.get("windowStart");
    return value!.toBigInt();
  }

  set windowStart(value: BigInt) {
    this.set("windowStart", Value.fromBigInt(value));
  }

  get claimWindowSize(): BigInt {
    let value = this.get("claimWindowSize");
    return value!.toBigInt();
  }

  set claimWindowSize(value: BigInt) {
    this.set("claimWindowSize", Value.fromBigInt(value));
  }

  get temporalUnit(): BigInt {
    let value = this.get("temporalUnit");
    return value!.toBigInt();
  }

  set temporalUnit(value: BigInt) {
    this.set("temporalUnit", Value.fromBigInt(value));
  }

  get freezePeriod(): BigInt {
    let value = this.get("freezePeriod");
    return value!.toBigInt();
  }

  set freezePeriod(value: BigInt) {
    this.set("freezePeriod", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get reservedWindowSize(): BigInt {
    let value = this.get("reservedWindowSize");
    return value!.toBigInt();
  }

  set reservedWindowSize(value: BigInt) {
    this.set("reservedWindowSize", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get bounty(): BigInt {
    let value = this.get("bounty");
    return value!.toBigInt();
  }

  set bounty(value: BigInt) {
    this.set("bounty", Value.fromBigInt(value));
  }

  get requiredDeposit(): BigInt {
    let value = this.get("requiredDeposit");
    return value!.toBigInt();
  }

  set requiredDeposit(value: BigInt) {
    this.set("requiredDeposit", Value.fromBigInt(value));
  }
}
